<form class="formNode zipZone" action="/admin/about-us/contact-us/offices/edit">
    <input class="hiddenField" type="hidden" name="officeID" value="{{{ office.officeID }}}">
    <section class="fieldSection">
        <div class="fieldWrapper">
            <label class="fieldLabel" for="officeName">Office name</label>
            <input class="textField" type="text" id="officeName"
                   name="officeName" value="{{{ office.officeName }}}">
        </div>
        <div class="buttonWrapper">
            <button class="deleteButton" type="button" data-redirect="/admin/about-us/contact-us"
                    data-action="/admin/about-us/contact-us/offices/{{{ office.officeID }}}">
                Delete Office
            </button>
            <div class="buttonHiddenWrapper hiddenWrapper">
                <div class="wrapperTitle">Are you sure you want to remove this office?</div>
                <div class="wrapperButtons">
                    <button class="cancelButton" type="button">CANCEL</button>
                    <button class="confirmButton" type="button">DELETE</button>
                </div>
            </div>
        </div>
    </section>
    <section class="fieldSection">
        <div class="fieldWrapper">
            <label class="fieldLabel" for="officeTitle">Office title</label>
            <input class="textField" type="text" id="officeTitle"
                   name="officeTitle" value="{{{ office.officeTitle }}}">
        </div>
    </section>

    <section class="fieldSection">
        <div class="fieldWrapper" style="width: 52%; margin-right: 10px;">
            <label class="fieldLabel" for="officeAddress">Address</label>
            <input class="textField" type="text" id="officeAddress"
                   name="officeAddress" value="{{{ office.officeAddress }}}">
        </div>
        <div class="fieldWrapper" style="width: 18%; margin-right: 10px;">
            <label class="fieldLabel" for="lat">LAT</label>
            <input class="textField" type="text" id="lat" name="lat" value="{{{ office.lat }}}">
        </div>
        <div class="fieldWrapper" style="width: 18%; margin-right: 10px;">
            <label class="fieldLabel" for="lng">LNG</label>
            <input class="textField" type="text" id="lng" name="lng" value="{{{ office.lng }}}">
        </div>
        <div class="fieldWrapper" style="width: 10%">
            <label class="fieldLabel" for="zoom">Zoom</label>
            <input class="textField" type="text" id="zoom" name="zoom" value="{{{ office.zoom }}}">
        </div>
    </section>

    <section class="mapSection">
        <div class="mapPlaceholder"></div>
        <script>
            const mapNode = document.querySelector(`.mapPlaceholder`);
            const addressField = document.querySelector(`#officeAddress`);
            const latField = document.querySelector(`#lat`);
            const lngField = document.querySelector(`#lng`);
            const zoomField = document.querySelector(`#zoom`);
            const markers = [];
            const setZoom = (map) => {
                return () => {
                    zoomField.value = map.getZoom();
                };
            };
            const setCenter = (map) => {
                return () => {
                    latField.value = map.getCenter().lat();
                    lngField.value = map.getCenter().lng();
                }
            };
            function initMap() {
                const lat = Number(latField.value) || 38.89511;
                const lng = Number(lngField.value) || -77.03637;
                const zoom = Number(zoomField.value) || 8;
                const coors = { lat, lng };
                const map = new google.maps.Map(mapNode, { zoom, center: coors });
                setZoom(map)();
                setCenter(map)();
                map.addListener(`zoom_changed`, setZoom(map));
                map.addListener(`center_changed`, setCenter(map));
                const geocoder = new google.maps.Geocoder();
                const callback = (results, status) => {
                    if (!status || !results.length) return false;
                    latField.value = results[0].geometry.location.lat();
                    lngField.value = results[0].geometry.location.lng();
                    const position = results[0].geometry.location;
                    map.setCenter(position);
                    map.setZoom(13);
                };
                const geocodeAddress = (geocoder) => {
                    if (!addressField.value) return false;
                    geocoder.geocode({ address: addressField.value }, callback);
                };
                addressField.addEventListener(`change`, () => {
                    geocodeAddress(geocoder, map);
                });
                addressField.addEventListener(`input`, () => {
                    geocodeAddress(geocoder, map);
                });
            }
        </script>
    </section>

    <div class="formButtons">
        <button class="submitButton" type="button" title="Update"
                data-action="update" data-api="">Update</button>
    </div>

</form>

<script async src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAUZcbipHbHCXwp6PdXIFGhExytbzvh7Tk&callback=initMap"></script>